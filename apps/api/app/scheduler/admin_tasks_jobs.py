# apps/api/app/scheduler/admin_tasks_jobs.py
from datetime import datetime, timedelta, date
from apscheduler.schedulers.background import BackgroundScheduler
from sqlalchemy.orm import sessionmaker
from pytz import timezone

from app.db.session import engine
from app.services.admin_tasks_service import (
    scan_overdue_and_alert,
    send_shift_end_report_if_pending,
    send_day_end_report,
)
from app.services.attendance_service import attendance_check_and_report

# BONUS raporlarƒ± artƒ±k "metrics + template + notify" √º√ßl√ºs√ºyle √ßalƒ±≈üƒ±yor
from app.services.bonus_metrics_service import (
    compute_bonus_daily_context,
    compute_bonus_periodic_context,
)
from app.services.template_engine import render
from app.services.telegram_notify import send_text

# ---- DB session factory ----
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)
scheduler = BackgroundScheduler(timezone="Europe/Istanbul")
IST = timezone("Europe/Istanbul")

# ---- Decorator (√∂nce tanƒ±mlƒ±yoruz!) ----
def _with_db(fn):
    def inner(*args, **kwargs):
        db = SessionLocal()
        try:
            return fn(db, *args, **kwargs)
        finally:
            db.close()
    return inner

# ---- Jobs ----
@_with_db
def job_scan_overdue(db):
    # Admin g√∂revlerinde gecikenleri periyodik tarama (cooldown=60 dk)
    scan_overdue_and_alert(db, cooldown_min=60)

@_with_db
def job_shift_end_sabah(db):
    # 16:00 IST ‚Üí bug√ºn√ºn sabah ≈üifti
    now_ist = datetime.now(IST)
    d = date(now_ist.year, now_ist.month, now_ist.day)
    send_shift_end_report_if_pending(db, d, "Sabah")

@_with_db
def job_shift_end_oglen(db):
    # 20:00 IST ‚Üí bug√ºn√ºn √∂ƒülen ≈üifti
    now_ist = datetime.now(IST)
    d = date(now_ist.year, now_ist.month, now_ist.day)
    send_shift_end_report_if_pending(db, d, "√ñƒülen")

@_with_db
def job_shift_end_aksam(db):
    # 00:00 IST ‚Üí bir √∂nceki g√ºn√ºn ak≈üam ≈üifti
    y = datetime.now(IST) - timedelta(days=1)
    d = date(y.year, y.month, y.day)
    send_shift_end_report_if_pending(db, d, "Ak≈üam")

@_with_db
def job_shift_end_gece(db):
    # 07:59 IST ‚Üí bug√ºn√ºn gece ≈üifti
    now_ist = datetime.now(IST)
    d = date(now_ist.year, now_ist.month, now_ist.day)
    send_shift_end_report_if_pending(db, d, "Gece")

@_with_db
def job_day_end_0015(db):
    # Admin g√∂revleri ‚Äî 00:15 IST ‚Üí bir √∂nceki g√ºn√ºn genel raporu
    y = datetime.now(IST) - timedelta(days=1)
    d = date(y.year, y.month, y.day)
    send_day_end_report(db, d)

@_with_db
def job_attendance_daily_2000(db):
    # Mesai yoklama ‚Äî 20:00 IST ‚Üí bug√ºn√ºn √∂zeti
    now = datetime.now(IST)
    d = date(now.year, now.month, now.day)
    attendance_check_and_report(db, d)

# ---------------- BONUS: G√ºn Sonu (00:15, d√ºn) ----------------
@_with_db
def job_bonus_day_end_0015(db):
    # D√ºn i√ßin metrikleri hesapla
    y = datetime.now(IST) - timedelta(days=1)
    target = date(y.year, y.month, y.day)
    ctx = compute_bonus_daily_context(db, target, sla_first_sec=60)

    # listeleri stringe √ßevir
    slow_text = "\n".join(
        [f"‚Ä¢ {i.get('full_name','-')} ‚Äî {int(i.get('gt60_cnt') or 0)} i≈ülem" for i in ctx["slow_list"]]
    ) or "‚Ä¢ ‚Äî"
    per_emp_text = "\n".join(
        [
            f"‚Ä¢ {i.get('full_name','-')} ‚Äî {int(i.get('close_cnt') or 0)} i≈ülem ‚Ä¢ √ò "
            f"{(str(int(round(i['avg_first_emp'])))+' sn') if i.get('avg_first_emp') is not None else '‚Äî'}"
            for i in ctx["per_emp"]
        ]
    ) or "‚Ä¢ ‚Äî"

    message_ctx = {
        "date": ctx["date_label"],
        "total_close": ctx["total_close"],
        "avg_first": ctx["avg_first_sec"] if ctx["avg_first_sec"] is not None else "‚Äî",
        "gt60_total": ctx["gt60_total"],
        "slow_list_text": slow_text,
        "per_emp_text": per_emp_text,
    }

    # DB'de ≈üablon yoksa kullanƒ±lacak fallback metin
    fallback = (
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üì£ BONUS ‚Ä¢ G√ºn Sonu Raporu\n"
        "üóìÔ∏è {date}\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üìä Genel\n"
        "‚Ä¢ Toplam Kapanƒ±≈ü: {total_close}\n"
        "‚Ä¢ √ò ƒ∞lk Yanƒ±t: {avg_first} sn\n"
        "‚Ä¢ 60 sn √ºzeri i≈ülemler: {gt60_total}\n\n"
        "‚ö†Ô∏è Ge√ß Yanƒ±t Verenler (60 sn √ºzeri)\n"
        "{slow_list_text}\n\n"
        "üë• Personel Bazlƒ± ƒ∞≈ülem Sayƒ±larƒ±\n"
        "{per_emp_text}"
    )

    text_msg = render(db, "bonus_daily_v1", message_ctx, fallback, channel="bonus")
    send_text(text_msg)

# ---------------- BONUS: 2 saatlik (√ßift saatlerde) ----------------
@_with_db
def job_bonus_periodic_2h(db):
    end_ist = datetime.now(IST)
    ctx = compute_bonus_periodic_context(db, end_ist, hours=2, sla_first_sec=60)

    top2_text = "\n".join(
        [
            f"‚Ä¢ {i.get('full_name','-')} ‚Äî {int(i.get('cnt') or 0)} i≈ülem ‚Ä¢ √ò "
            f"{(str(int(round(i['avg_first_emp'])))+' sn') if i.get('avg_first_emp') is not None else '‚Äî'}"
            for i in ctx["top2"]
        ]
    ) or "‚Ä¢ ‚Äî"

    message_ctx = {
        "date": ctx["date_label"],
        "win_start": ctx["win_start"],
        "win_end": ctx["win_end"],
        "total_close": ctx["total_close"],
        "avg_first": ctx["avg_first_sec"] if ctx["avg_first_sec"] is not None else "‚Äî",
        "gt60_total": ctx["gt60_total"],
        "gt60_rate": ctx["gt60_rate"],
        "top2_text": top2_text,
        "warn_line": (f"‚ö†Ô∏è 60 sn √ºzeri oranƒ± y√ºksek (%{ctx['gt60_rate']})" if ctx["gt60_rate"] >= 25 else ""),
    }

    fallback = (
        "‚è±Ô∏è BONUS ‚Ä¢ {date} {win_start}-{win_end}\n\n"
        "‚Ä¢ Kapanƒ±≈ü: {total_close}\n"
        "‚Ä¢ √ò ƒ∞lk KT: {avg_first} sn\n"
        "‚Ä¢ 60 sn √ºzeri i≈ülemler: {gt60_total} (%{gt60_rate})\n\n"
        "ƒ∞yi Gidenler\n"
        "{top2_text}\n"
        "{warn_line}"
    )

    text_msg = render(db, "bonus_periodic_v1", message_ctx, fallback, channel="bonus")
    send_text(text_msg)

# ---- Scheduler ba≈ülatma ----
def start_scheduler():
    # Periyodik gecikme taramasƒ±
    scheduler.add_job(
        job_scan_overdue,
        "interval",
        minutes=5,
        id="scan_overdue_5m",
        replace_existing=True,
    )

    # ≈ûift sonlarƒ± (IST)
    scheduler.add_job(
        job_shift_end_sabah,
        "cron",
        hour=16,
        minute=0,
        id="shift_end_sabah",
        replace_existing=True,
    )
    scheduler.add_job(
        job_shift_end_oglen,
        "cron",
        hour=20,
        minute=0,
        id="shift_end_oglen",
        replace_existing=True,
    )
    scheduler.add_job(
        job_shift_end_aksam,
        "cron",
        hour=0,
        minute=0,
        id="shift_end_aksam",
        replace_existing=True,
    )
    scheduler.add_job(
        job_shift_end_gece,
        "cron",
        hour=7,
        minute=59,
        id="shift_end_gece",
        replace_existing=True,
    )

    # Mesai (attendance) g√ºnl√ºk kontrol (IST)
    scheduler.add_job(
        job_attendance_daily_2000,
        "cron",
        hour=20,
        minute=0,
        id="attendance_2000",
        replace_existing=True,
    )

    # BONUS: g√ºn sonu (00:15 IST) ‚Äî d√ºn√º raporla (metrics+template)
    scheduler.add_job(
        job_bonus_day_end_0015,
        "cron",
        hour=0,
        minute=15,
        id="bonus_day_end_0015",
        replace_existing=True,
    )

    # BONUS: 2 saatlik √∂zet ‚Äî her √ßift saatte (metrics+template)
    scheduler.add_job(
        job_bonus_periodic_2h,
        "cron",
        hour="0,2,4,6,8,10,12,14,16,18,20,22",
        minute=0,
        id="bonus_periodic_2h",
        replace_existing=True,
    )

    if not scheduler.running:
        scheduler.start()
