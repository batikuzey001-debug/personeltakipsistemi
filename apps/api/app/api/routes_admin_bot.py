# apps/api/app/api/routes_admin_bot.py
from __future__ import annotations

from datetime import datetime, timedelta, date
from typing import Optional
from fastapi import APIRouter, Depends, HTTPException, Query
from pydantic import BaseModel
from sqlalchemy.orm import Session
from pytz import timezone

from app.deps import get_db
from app.services.admin_settings_service import (
    get_bool, set_bool,
    ADMIN_TASKS_TG_ENABLED_KEY,
    BONUS_TG_ENABLED_KEY,
    FINANCE_TG_ENABLED_KEY,
    ATTENDANCE_TG_ENABLED_KEY,
)
from app.services.bonus_metrics_service import (
    compute_bonus_daily_context,
    compute_bonus_periodic_context,
)
from app.services.template_engine import render
from app.services.telegram_notify import send_text

IST = timezone("Europe/Istanbul")

router = APIRouter(prefix="/admin-bot", tags=["admin_bot"])

# --- basit saƒülƒ±k kontrol√º ---
@router.get("/ping")
def admin_bot_ping():
    return {"ok": True, "service": "admin-bot"}

# ================= SETTINGS =================
class BotSettingsOut(BaseModel):
    admin_tasks_tg_enabled: bool
    bonus_tg_enabled: bool
    finance_tg_enabled: bool
    attendance_tg_enabled: bool

class BotSettingsIn(BaseModel):
    admin_tasks_tg_enabled: bool | None = None
    bonus_tg_enabled: bool | None = None
    finance_tg_enabled: bool | None = None
    attendance_tg_enabled: bool | None = None

@router.get("/settings", response_model=BotSettingsOut)
def read_settings(db: Session = Depends(get_db)):
    return BotSettingsOut(
        admin_tasks_tg_enabled=get_bool(db, ADMIN_TASKS_TG_ENABLED_KEY, False),
        bonus_tg_enabled=get_bool(db, BONUS_TG_ENABLED_KEY, False),
        finance_tg_enabled=get_bool(db, FINANCE_TG_ENABLED_KEY, False),
        attendance_tg_enabled=get_bool(db, ATTENDANCE_TG_ENABLED_KEY, False),
    )

@router.put("/settings", response_model=BotSettingsOut)
def update_settings(body: BotSettingsIn, db: Session = Depends(get_db)):
    if body.admin_tasks_tg_enabled is not None:
        set_bool(db, ADMIN_TASKS_TG_ENABLED_KEY, body.admin_tasks_tg_enabled)
    if body.bonus_tg_enabled is not None:
        set_bool(db, BONUS_TG_ENABLED_KEY, body.bonus_tg_enabled)
    if body.finance_tg_enabled is not None:
        set_bool(db, FINANCE_TG_ENABLED_KEY, body.finance_tg_enabled)
    if body.attendance_tg_enabled is not None:
        set_bool(db, ATTENDANCE_TG_ENABLED_KEY, body.attendance_tg_enabled)
    return read_settings(db)

# ================= TRIGGERS (BONUS) =================
# G√ºn sonu (d√ºn): yeni ‚Äúciddi‚Äù format (Genel / Ge√ß Yanƒ±t / Personel Bazlƒ±)
@router.post("/trigger/bonus/daily")
def trigger_bonus_daily(
    d: str | None = Query(None, description="YYYY-MM-DD (default: yesterday IST)"),
    sla_first_sec: int = Query(60, ge=1, le=3600),
    db: Session = Depends(get_db),
):
    if not get_bool(db, BONUS_TG_ENABLED_KEY, False):
        raise HTTPException(status_code=400, detail="bonus notifications disabled")

    now_ist = datetime.now(IST)
    if d:
        try:
            y, m, dd = map(int, d.split("-"))
            target = date(y, m, dd)
        except Exception:
            raise HTTPException(status_code=400, detail="d format YYYY-MM-DD")
    else:
        target = (now_ist - timedelta(days=1)).date()

    ctx = compute_bonus_daily_context(db, target, sla_first_sec=sla_first_sec)

    slow_text = "\n".join(
        [f"‚Ä¢ {i.get('full_name','-')} ‚Äî {int(i.get('gt60_cnt') or 0)} i≈ülem" for i in ctx["slow_list"]]
    ) or "‚Ä¢ ‚Äî"

    per_emp_text = "\n".join(
        [
            f"‚Ä¢ {i.get('full_name','-')} ‚Äî {int(i.get('close_cnt') or 0)} i≈ülem ‚Ä¢ √ò "
            f"{(str(int(round(i['avg_first_emp'])))+' sn') if i.get('avg_first_emp') is not None else '‚Äî'}"
            for i in ctx["per_emp"]
        ]
    ) or "‚Ä¢ ‚Äî"

    message_ctx = {
        "date": ctx["date_label"],
        "total_close": ctx["total_close"],
        "avg_first": ctx["avg_first_sec"] if ctx["avg_first_sec"] is not None else "‚Äî",
        "gt60_total": ctx["gt60_total"],
        "slow_list_text": slow_text,
        "per_emp_text": per_emp_text,
    }

    fallback = (
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "üì£ BONUS ‚Ä¢ G√ºn Sonu Raporu\n"
        "üóìÔ∏è {date}\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üìä Genel\n"
        "‚Ä¢ Toplam Kapanƒ±≈ü: {total_close}\n"
        "‚Ä¢ √ò ƒ∞lk Yanƒ±t: {avg_first} sn\n"
        "‚Ä¢ 60 sn √ºzeri i≈ülemler: {gt60_total}\n\n"
        "‚ö†Ô∏è Ge√ß Yanƒ±t Verenler (60 sn √ºzeri)\n"
        "{slow_list_text}\n\n"
        "üë• Personel Bazlƒ± ƒ∞≈ülem Sayƒ±larƒ±\n"
        "{per_emp_text}"
    )

    text_msg = render(db, "bonus_daily_v1", message_ctx, fallback, channel="bonus")
    if not send_text(text_msg):
        raise HTTPException(status_code=400, detail="send failed")
    return {"ok": True, "date": ctx["date_label"]}

# 2 saatlik (hafif): Genel 3 KPI + ‚Äúiyi gidenler (top2)‚Äù + e≈üik uyarƒ±sƒ±
@router.post("/trigger/bonus/periodic")
def trigger_bonus_periodic(
    end: str | None = Query(None, description="IST biti≈ü (YYYY-MM-DDTHH:MM); default=now"),
    sla_first_sec: int = Query(60, ge=1, le=3600),
    sla_warn_pct: int = Query(25, ge=1, le=100),
    db: Session = Depends(get_db),
):
    if not get_bool(db, BONUS_TG_ENABLED_KEY, False):
        raise HTTPException(status_code=400, detail="bonus notifications disabled")

    if end:
        try:
            end_ist = IST.localize(datetime.strptime(end, "%Y-%m-%dT%H:%M"))
        except Exception:
            raise HTTPException(status_code=400, detail="end format YYYY-MM-DDTHH:MM")
    else:
        end_ist = datetime.now(IST)

    ctx = compute_bonus_periodic_context(db, end_ist, hours=2, sla_first_sec=sla_first_sec)

    top2_text = "\n".join(
        [
            f"‚Ä¢ {i.get('full_name','-')} ‚Äî {int(i.get('cnt') or 0)} i≈ülem ‚Ä¢ √ò "
            f"{(str(int(round(i['avg_first_emp'])))+' sn') if i.get('avg_first_emp') is not None else '‚Äî'}"
            for i in ctx["top2"]
        ]
    ) or "‚Ä¢ ‚Äî"

    warn_line = f"‚ö†Ô∏è 60 sn √ºzeri oranƒ± y√ºksek (%{ctx['gt60_rate']})" if ctx["gt60_rate"] >= sla_warn_pct else ""

    message_ctx = {
        "date": ctx["date_label"],
        "win_start": ctx["win_start"],
        "win_end": ctx["win_end"],
        "total_close": ctx["total_close"],
        "avg_first": ctx["avg_first_sec"] if ctx["avg_first_sec"] is not None else "‚Äî",
        "gt60_total": ctx["gt60_total"],
        "gt60_rate": ctx["gt60_rate"],
        "top2_text": top2_text,
        "warn_line": warn_line,
    }

    fallback = (
        "‚è±Ô∏è BONUS ‚Ä¢ {date} {win_start}-{win_end}\n\n"
        "‚Ä¢ Kapanƒ±≈ü: {total_close}\n"
        "‚Ä¢ √ò ƒ∞lk KT: {avg_first} sn\n"
        "‚Ä¢ 60 sn √ºzeri i≈ülemler: {gt60_total} (%{gt60_rate})\n\n"
        "ƒ∞yi Gidenler\n"
        "{top2_text}\n"
        "{warn_line}"
    )

    text_msg = render(db, "bonus_periodic_v1", message_ctx, fallback, channel="bonus")
    if not send_text(text_msg):
        raise HTTPException(status_code=400, detail="send failed")
    return {"ok": True, "window": f"{ctx['win_start']}-{ctx['win_end']}", "date": ctx["date_label"]}
